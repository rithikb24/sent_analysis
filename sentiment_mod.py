# -*- coding: utf-8 -*-
"""sentiment_mod.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVAI62lqWr3ZzHLFQR6qjTAdrqiQfq1M
"""

from google.colab import drive
drive.mount('/content/drive')

import nltk
nltk.download('punkt')

import nltk
import random
#from nltk.corpus import movie_reviews
from nltk.classify.scikitlearn import SklearnClassifier
import pickle
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC
from nltk.classify import ClassifierI
from statistics import mode
from nltk.tokenize import word_tokenize



class VoteClassifier(ClassifierI):
    def __init__(self, *classifiers):
        self._classifiers = classifiers

    def classify(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)
        return mode(votes)

    def confidence(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)

        choice_votes = votes.count(mode(votes))
        conf = choice_votes / len(votes)
        return conf


documents_f = open("/content/gdrive/My Drive/pickled_files/documents.pickle", "rb")
documents = pickle.load(documents_f)
documents_f.close()




word_features5k_f = open("/content/gdrive/My Drive/pickled_files/word_festures.pickle", "rb")
word_features = pickle.load(word_features5k_f)
word_features5k_f.close()


def find_features(document):
    words = word_tokenize(document)
    features = {}
    for w in word_features:
        features[w] = (w in words)

    return features

featuresets = [(find_features(rev), category) for (rev, category) in documents]
random.shuffle(featuresets)

#featuresets_f = open("/content/gdrive/My Drive/pickled_files/featuresets.pickle", "rb")
#featuresets = pickle.load(featuresets_f)
#featuresets_f.close()

random.shuffle(featuresets)
print(len(featuresets))

testing_set = featuresets[10000:]
training_set = featuresets[:10000]



open_file = open("/content/gdrive/My Drive/pickled_files/originalnaivebayes5k.pickle", "rb")
classifier = pickle.load(open_file)
open_file.close()


open_file = open("/content/gdrive/My Drive/pickled_files/MNB_classifier5k.pickle", "rb")
MNB_classifier = pickle.load(open_file)
open_file.close()



open_file = open("/content/gdrive/My Drive/pickled_files/BernoulliNB_classifier5k.pickle", "rb")
BernoulliNB_classifier = pickle.load(open_file)
open_file.close()


open_file = open("/content/gdrive/My Drive/pickled_files/LogisticRegression_classifier5k.pickle", "rb")
LogisticRegression_classifier = pickle.load(open_file)
open_file.close()


open_file = open("/content/gdrive/My Drive/pickled_files/LinearSVC_classifier5k.pickle", "rb")
LinearSVC_classifier = pickle.load(open_file)
open_file.close()


#open_file = open("/content/gdrive/My Drive/pickled_files/SGDC_classifier5k.pickle", "rb")
#SGDC_classifier = pickle.load(open_file)
#open_file.close()




voted_classifier = VoteClassifier(
                                  classifier,
                                  LinearSVC_classifier,
                                  MNB_classifier,
                                  BernoulliNB_classifier,
                                  LogisticRegression_classifier)




def sentiment(text):
    feats = find_features(text)
    return voted_classifier.classify(feats),voted_classifier.confidence(feats)
print("gang shit bruh")

print(sentiment("film was really good, i loved it. amazing, and beautiful"))
print(sentiment("movie sucked ass, garbage, boring and shit"))
!pip install tweepy

from tweepy import Stream
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener
import json


#consumer key, consumer secret, access token, access secret.
ckey="6KJfs19Ptud9SjNdanf6rdN3j"
csecret="go1dWrBL08y8sPXvK81bd2czM2iAzdlfbVsEJze3GGpDLPDmyC"
atoken="881934192648437761-6I5FsQA0NBOx465ldkwZRsD6B64bH4a"
asecret="BYkGSmA6105usAq7MQ5Gq6LxBavOEkEpeiPBU79dzLIaI"

class listener(StreamListener):

  def on_data(self,data):
    all_data = json.loads(data)
    tweet = all_data["text"]
    sentiment_value, confidence = sentiment(tweet)
    print(tweet, sentiment_value, confidence)
    
    if confidence*100 > 80:
      output = open("twitter-out.txt","a")
      output.write(sentiment_value)
      output.write('\n')
      output.close()
    return True

  def on_error(self,status):
    print(status)
    


auth = OAuthHandler(ckey, csecret)
auth.set_access_token(atoken, asecret)

twitterStream = Stream(auth, listener())
twitterStream.filter(track=["Trump"])

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import style
import time

style.use("ggplot")

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(i):
    pullData = open("twitter-out.txt","r").read()
    lines = pullData.split('\n')

    xar = []
    yar = []

    x = 0
    y = 0

    for l in lines[-200:]:
        x += 1
        if "pos" in l:
            y += 1
        elif "neg" in l:
            y -= 1

        xar.append(x)
        yar.append(y)
        
    ax1.clear()
    ax1.plot(xar,yar)
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()